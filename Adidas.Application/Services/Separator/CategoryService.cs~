
using Adidas.Application.Contracts.RepositoriesContracts.Separator;
using Adidas.Application.Contracts.ServicesContracts.Separator;
using Adidas.Models.Separator;
using Microsoft.Extensions.Logging;
using Adidas.DTOs.Separator.Category_DTOs;
using Microsoft.Data.SqlClient;
using System.Data.Entity.Infrastructure;
using Adidas.DTOs.CommonDTOs;
using Mapster;

namespace Adidas.Application.Services.Separator
{
    public class CategoryService : GenericService<Category, CategoryDto, CategoryCreateDto, CategoryUpdateDto>,ICategoryService
    {
        private readonly ICategoryRepository _categoryRepository;
        private readonly ILogger<CategoryService> _logger;

        public CategoryService(
            ICategoryRepository categoryRepository,
            ILogger<CategoryService> logger
        ): base(categoryRepository, logger)
        {
            _categoryRepository = categoryRepository;
            _logger = logger;
        }

        public async Task<OperationResult<IEnumerable<CategoryDto>>> GetMainCategoriesAsync()
        {
            try
            {
                var categories = await _categoryRepository.GetMainCategoriesAsync();

                // // Manual mapping
                // var categoryDtos = categories.Select(c => new CategoryDto
                // {
                //     Id = c.Id,
                //     Name = c.Name,
                //     Description = c.Description,
                //     Slug = c.Slug,
                //     ImageUrl = c.ImageUrl,
                //     SortOrder = c.SortOrder,
                //     ParentCategoryId = c.ParentCategoryId,
                //     CreatedAt = c.CreatedAt ?? DateTime.MinValue,
                //     UpdatedAt = c.UpdatedAt,
                //     IsActive = c.IsActive,
                //     Products = c.Products?.Select(p => new ProductDto
                //     {
                //         Id = p.Id,
                //         Name = p.Name,
                //         // Add other necessary mappings here
                //     }).ToList() ?? new List<ProductDto>(),
                //     SubCategories = c.SubCategories?.Select(sc => new CategoryDto
                //     {
                //         Id = sc.Id,
                //         Name = sc.Name,
                //         Description = sc.Description,
                //         Slug = sc.Slug,
                //         ImageUrl = sc.ImageUrl,
                //         SortOrder = sc.SortOrder,
                //         ParentCategoryId = sc.ParentCategoryId,
                //         CreatedAt = sc.CreatedAt ?? DateTime.MinValue,
                //         UpdatedAt = sc.UpdatedAt,
                //         IsActive = sc.IsActive
                //     }).ToList() ?? new List<CategoryDto>()
                // }).ToList();

                return OperationResult<IEnumerable<CategoryDto>>.Success(categories.Adapt<IEnumerable<CategoryDto>>());
            }catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting main categories");
                return OperationResult<IEnumerable<CategoryDto>>.Fail(ex.Message);
            }
        }


        public async Task<OperationResult<bool>> CreateAsync(CategoryCreateDto createCategoryDto)
        {
            try
            {
                await _categoryRepository.AddAsync(createCategoryDto.Adapt<Category>());
                var result = await _categoryRepository.SaveChangesAsync();

                return result == 0
                    ? OperationResult<bool>.Fail("Failed to create category.")
                    : OperationResult<bool>.Success(true);
            }
            catch (DbUpdateException ex)
            {
                if (ex.InnerException is SqlException sqlEx &&
                    sqlEx.Message.Contains("IX_Categories_Slug"))
                {
                    _logger.LogError(ex, "Error creating category");
                    return OperationResult<bool>.Fail("Slug already exists.");
                }

                return OperationResult<bool>.Fail(ex.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating category");
                return OperationResult<bool>.Fail(ex.Message);
            }
        }

        public async Task<OperationResult<bool>> DeleteAsync(Guid id)
        {
            try
            {
                var category = await _categoryRepository.GetByIdAsync(id);
                if (category == null)
                {
                    return OperationResult<bool>.Fail("Category not found.");
                }

                await _categoryRepository.SoftDeleteAsync(id);
                var result = await _categoryRepository.SaveChangesAsync();

                if (result == 0)
                {
                    return OperationResult<bool>.Fail("Failed to Delete category.");
                }

                return OperationResult<bool>.Success(true);
            
            }catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting category");
                return OperationResult<bool>.Fail(ex.Message);
            }
        }

        public async Task<OperationResult<bool>> UpdateAsync(CategoryUpdateDto dto)
        {
            try
            {
                var category = await _categoryRepository.GetByIdAsync(dto.Id);
                if (category == null)
                {
                    return OperationResult<bool>.Fail("Category not found.");
                }

                // Check for slug uniqueness
                var slugExists = await _categoryRepository.GetCategoryBySlugAsync(dto.Slug);
                if (slugExists != null && dto.Id != category.Id)
                {
                    return OperationResult<bool>.Fail("Slug already exists.");
                }
                

                await _categoryRepository.UpdateAsync(dto.Adapt<Category>());
                var result = await _categoryRepository.SaveChangesAsync();

                return result == 0 ? OperationResult<bool>.Fail("Failed to update category.") : OperationResult<bool>.Success(true);
            }catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating category");
                return OperationResult<bool>.Fail(ex.Message);
            }
        }


        public async Task<OperationResult<CategoryUpdateDto>> GetCategoryToEditByIdAsync(Guid id)
        {
            try
            {
                var category = await _categoryRepository.GetByIdAsync(id);

                if (category == null)
                {
                    return OperationResult<CategoryUpdateDto>.Fail("Category not found.");
                }

                return OperationResult<CategoryUpdateDto>.Success(category.Adapt<CategoryUpdateDto>());
            }catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting category to edit");
                return OperationResult<CategoryUpdateDto>.Fail(ex.Message);
            }
        }

        public async Task<OperationResult<CategoryDto>> GetCategoryDetailsAsync(Guid id)
        {
            try
            {
                var category = await _categoryRepository.GetByIdAsync(id,
                    c => c.SubCategories,
                    c => c.Products,
                    c => c.ParentCategory);

                if (category == null)
                {
                    return OperationResult<CategoryDto>.Fail("Category not found.");
                }
                return OperationResult<CategoryDto>.Success(category.Adapt<CategoryDto>());

                // var dto = new CategoryDto
                // {
                //     Id = category.Id,
                //     Name = category.Name,
                //     Slug = category.Slug,
                //     Description = category.Description,
                //     ImageUrl = category.ImageUrl,
                //     ParentCategoryId = category.ParentCategoryId,
                //     SortOrder = category.SortOrder,
                //     IsActive = category.IsActive,
                //     ParentCategory = category.ParentCategory != null
                //         ? new CategoryDto
                //         {
                //             Id = category.ParentCategory.Id,
                //             Name = category.ParentCategory.Name,
                //             Slug = category.ParentCategory.Slug
                //         }
                //         : null,
                //     SubCategories = category.SubCategories?.Select(sub => new CategoryDto
                //     {
                //         Id = sub.Id,
                //         Name = sub.Name,
                //         Description = sub.Description,
                //         ImageUrl = sub.ImageUrl,
                //         SortOrder = sub.SortOrder,
                //         Slug = sub.Slug,
                //         IsActive = sub.IsActive
                //     }).ToList() ?? new List<CategoryDto>(),
                //     Products = category.Products?.Select(p => new ProductDto
                //     {
                //         Id = p.Id,
                //         Name = p.Name,
                //         Description = p.Description,
                //         Price = p.Price,
                //         IsActive = p.IsActive
                //     }).ToList() ?? new List<ProductDto>()
                // };
                //
                // return dto;
            }catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting category details");
                return OperationResult<CategoryDto>.Fail(ex.Message);
            }
        }


        //#region Generic Service Overrides

        //protected override async Task ValidateCreateAsync(CreateCategoryDto createDto)
        //{
        //    // Validate slug uniqueness
        //    var slugExists = await ValidateSlugUniquenessAsync(createDto.Slug);
        //    if (!slugExists)
        //    {
        //        throw new InvalidOperationException("Category with this slug already exists");
        //    }

        //    // Validate parent category if provided
        //    if (createDto.ParentCategoryId.HasValue)
        //    {
        //        var parentCategory = await _categoryRepository.GetByIdAsync(createDto.ParentCategoryId.Value);
        //        if (parentCategory == null || parentCategory.IsDeleted)
        //        {
        //            throw new InvalidOperationException("Parent category not found");
        //        }
        //    }
        //}

        //protected override async Task ValidateUpdateAsync(Guid id, UpdateCategoryDto updateDto)
        //{
        //    // Validate slug uniqueness
        //    var slugExists = await ValidateSlugUniquenessAsync(updateDto.Slug, id);
        //    if (!slugExists)
        //    {
        //        throw new InvalidOperationException("Another category with this slug already exists");
        //    }

        //    // Validate parent category if provided
        //    if (updateDto.ParentCategoryId.HasValue)
        //    {
        //        if (updateDto.ParentCategoryId == id)
        //        {
        //            throw new InvalidOperationException("Category cannot be its own parent");
        //        }

        //        var parentCategory = await _categoryRepository.GetByIdAsync(updateDto.ParentCategoryId.Value);
        //        if (parentCategory == null || parentCategory.IsDeleted)
        //        {
        //            throw new InvalidOperationException("Parent category not found");
        //        }
        //    }
        //}

        //protected override async Task BeforeCreateAsync(Category entity)
        //{
        //    entity.CreatedAt = DateTime.UtcNow;
        //    entity.UpdatedAt = DateTime.UtcNow;
        //    entity.IsActive = true;
        //    entity.IsDeleted = false;
        //}

        //protected override async Task BeforeUpdateAsync(Category entity)
        //{
        //    entity.UpdatedAt = DateTime.UtcNow;
        //}

        //protected override async Task BeforeDeleteAsync(Category entity)
        //{
        //    // Check if category has subcategories
        //    var subCategories = await _categoryRepository.GetSubCategoriesAsync(entity.Id);
        //    if (subCategories.Any())
        //    {
        //        throw new InvalidOperationException("Cannot delete category that has subcategories");
        //    }
        //}

        //#endregion

        //#region Category-Specific Methods

        //public async Task<IEnumerable<CategoryDto>> GetMainCategoriesAsync()
        //{
        //    try
        //    {
        //        _logger.LogInformation("Getting main categories");
        //        var categories = await _categoryRepository.GetMainCategoriesAsync();
        //        return _mapper.Map<IEnumerable<CategoryDto>>(categories);
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError(ex, "Error retrieving main categories");
        //        throw;
        //    }
        //}

        //public async Task<IEnumerable<CategoryDto>> GetSubCategoriesAsync(Guid parentCategoryId)
        //{
        //    try
        //    {
        //        _logger.LogInformation("Getting subcategories for parent ID: {ParentCategoryId}", parentCategoryId);
        //        var categories = await _categoryRepository.GetSubCategoriesAsync(parentCategoryId);
        //        return _mapper.Map<IEnumerable<CategoryDto>>(categories);
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError(ex, "Error retrieving subcategories for parent ID: {ParentCategoryId}", parentCategoryId);
        //        throw;
        //    }
        //}

        //public async Task<CategoryResponseDto?> GetCategoryBySlugAsync(string slug)
        //{
        //    try
        //    {
        //        _logger.LogInformation("Getting category by slug: {CategorySlug}", slug);
        //        var category = await _categoryRepository.GetCategoryBySlugAsync(slug);

        //        if (category == null)
        //        {
        //            _logger.LogWarning("Category not found with slug: {CategorySlug}", slug);
        //            return null;
        //        }

        //        var categoryResponse = _mapper.Map<CategoryResponseDto>(category);

        //        // Get subcategories  
        //        var subCategories = await _categoryRepository.GetSubCategoriesAsync(category.Id);
        //        //categoryResponse.SubCategories = _mapper.Map<List<CategoryListDto>>(subCategories);

        //        return categoryResponse;
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError(ex, "Error retrieving category with slug: {CategorySlug}", slug);
        //        throw;
        //    }
        //}

        //public async Task<List<CategoryHierarchyDto>> GetCategoryHierarchyAsync(Guid categoryId)
        //{
        //    try
        //    {
        //        _logger.LogInformation("Getting category hierarchy for ID: {CategoryId}", categoryId);
        //        var hierarchy = await _categoryRepository.GetCategoryHierarchyAsync(categoryId);
        //        var hierarchyDtos = _mapper.Map<List<CategoryHierarchyDto>>(hierarchy);

        //        // Set levels
        //        for (int i = 0; i < hierarchyDtos.Count; i++)
        //        {
        //            hierarchyDtos[i].Level = i;
        //        }

        //        return hierarchyDtos;
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError(ex, "Error retrieving category hierarchy for ID: {CategoryId}", categoryId);
        //        throw;
        //    }
        //}

        //public async Task<bool> ValidateSlugUniquenessAsync(string slug, Guid? excludeId = null)
        //{
        //    try
        //    {
        //        _logger.LogInformation("Validating slug uniqueness: {Slug}", slug);
        //        var existingCategory = await _categoryRepository.GetCategoryBySlugAsync(slug);

        //        if (existingCategory == null)
        //        {
        //            return true; // Slug is unique
        //        }

        //        if (excludeId.HasValue && existingCategory.Id == excludeId.Value)
        //        {
        //            return true; // Same category, slug is valid
        //        }

        //        return false; // Slug already exists
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError(ex, "Error validating slug uniqueness: {Slug}", slug);
        //        throw;
        //    }
        //}

        //public async Task<PagedResultDtoDto<CategoryDto>> GetPaginatedCategoryListAsync(int pageNumber, int pageSize)
        //{
        //    try
        //    {
        //        _logger.LogInformation("Getting paginated category list - Page: {PageNumber}, Size: {PageSize}", pageNumber, pageSize);
        //        var (categories, totalCount) = await _categoryRepository.GetPagedAsync(pageNumber, pageSize, c => !c.IsDeleted);
        //        var categoryList = _mapper.Map<IEnumerable<CategoryDto>>(categories);

        //        return new PagedResultDtoDto<CategoryDto>
        //        {
        //            Items = categoryList,
        //            TotalCount = totalCount,
        //            PageNumber = pageNumber,
        //            PageSize = pageSize,
        //            TotalPages = (int)Math.Ceiling((double)totalCount / pageSize)
        //        };
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError(ex, "Error retrieving paginated category list");
        //        throw;
        //    }
        //}

        //#endregion
    }
}