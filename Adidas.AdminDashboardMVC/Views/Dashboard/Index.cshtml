@model Adidas.AdminDashboardMVC.ViewModels.Dashboard.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard Overview";
}

<!--Content Header-->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Dashboard Overview</h1>
            </div>
           
        </div>
    </div>
</div>

<!--Main content-->
<section class="content">
    <div class="container-fluid">

        <!-- Error Message Display -->
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible">
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                <h5><i class="icon fas fa-ban"></i> Error!</h5>
                @TempData["Error"]
            </div>
        }

        <!--Stats Cards Row-->
        <div class="row">
            <!--Total Sales-->
            <div class="col-lg-3 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        <h3>$@((Model?.Stats?.TotalRevenue ?? 0).ToString("N0"))</h3>
                        <p>Total Sales</p>
                        <small class="text-light">
                            <i class="fas fa-arrow-up"></i>
                            Monthly: $@((Model?.Stats?.MonthlyRevenue ?? 0).ToString("N0"))
                        </small>
                    </div>
                    <div class="icon">
                        <i class="ion ion-bag"></i>
                    </div>
                </div>
            </div>

            <!--Total Orders-->
            <div class="col-lg-3 col-6">
                <div class="small-box bg-success">
                    <div class="inner">
                        <h3>@(Model?.Stats?.TotalOrders ?? 0)</h3>
                        <p>Total Orders</p>
                        <small class="text-light">
                            <i class="fas fa-clock"></i>
                            @(Model?.Stats?.PendingOrders ?? 0) pending orders
                        </small>
                    </div>
                    <div class="icon">
                        <i class="ion ion-stats-bars"></i>
                    </div>
                </div>
            </div>

            <!--Active Customers-->
            <div class="col-lg-3 col-6">
                <div class="small-box bg-warning">
                    <div class="inner">
                        <h3>@(Model?.Stats?.TotalCustomers ?? 0)</h3>
                        <p>Active Customers</p>
                        <small class="text-dark">
                            <i class="fas fa-user-plus"></i>
                            +@(Model?.CustomerInsights?.NewCustomers ?? 0) new this month
                        </small>
                    </div>
                    <div class="icon">
                        <i class="ion ion-person-add"></i>
                    </div>
                </div>
            </div>

            <!--Low Stock Alerts-->
            <div class="col-lg-3 col-6">
                <div class="small-box bg-danger">
                    <div class="inner">
                        <h3>@(Model?.Stats?.LowStockProducts ?? 0)</h3>
                        <p>Low Stock Alerts</p>
                        <small class="text-light">
                            <i class="fas fa-exclamation-triangle"></i>
                            Items need restocking
                        </small>
                    </div>
                    <div class="icon">
                        <i class="ion ion-pie-graph"></i>
                    </div>
                </div>
            </div>
        </div>

        <!--Charts Row-->
        <div class="row">
            <!--Revenue Trends Chart-->
            @* <div class="col-md-8"> *@
            
            @* </div> *@

            <!--Top Products Chart-->
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Top Products</h3>
                        <div class="card-tools">
                            <span class="badge badge-success">Bar Chart - Best Selling Products</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <canvas id="productsChart" style="height: 300px;"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!--Additional Info Row-->
        <div class="row">
            <!--Recent Orders-->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Recent Orders</h3>
                        <div class="card-tools">
                            <a asp-controller="Orders" asp-action="Index" class="btn btn-sm btn-primary">
                                View All Orders
                            </a>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody id="recentOrdersTable">
                                <!--Orders will be loaded via AJAX-->
                                <tr>
                                    <td colspan="5" class="text-center">
                                        <div class="spinner-border spinner-border-sm" role="status">
                                            <span class="sr-only">Loading...</span>
                                        </div>
                                        Loading recent orders...
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!--Notifications-->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Notifications</h3>
                    </div>
                    <div class="card-body" id="notificationsContainer">
                        <!--Low Stock Alert-->
                        @if (Model?.Stats != null && Model.Stats.LowStockProducts > 0)
                        {
                            <div class="alert alert-warning alert-dismissible">
                                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                                <h5><i class="icon fas fa-exclamation-triangle"></i> Low Stock Alert</h5>
                                @Model.Stats.LowStockProducts products are running low on stock and need restocking.
                                <br>
                                <a asp-controller="Product" asp-action="LowStock" class="btn btn-sm btn-warning mt-2">
                                    View Low Stock Items
                                </a>
                            </div>
                        }

                        <!--Pending Orders Alert-->
                        @if (Model?.Stats != null && Model.Stats.PendingOrders > 0)
                        {
                            <div class="alert alert-info alert-dismissible">
                                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                                <h5><i class="icon fas fa-clock"></i> Pending Orders</h5>
                                You have @Model.Stats.PendingOrders pending orders that require attention.
                                <br>
                                <a asp-controller="Orders" asp-action="Pending" class="btn btn-sm btn-info mt-2">
                                    View Pending Orders
                                </a>
                            </div>
                        }

                        <!--New Customers Info-->
                        @if (Model?.CustomerInsights != null && Model.CustomerInsights.NewCustomers > 0)
                        {
                            <div class="alert alert-success alert-dismissible">
                                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                                <h5><i class="icon fas fa-user-plus"></i> New Customers</h5>
                                @Model.CustomerInsights.NewCustomers new customers joined this month!
                                <br>
                                <small class="text-muted">
                                    Average Customer Value: $@((Model.CustomerInsights.AverageCustomerValue).ToString("N2"))
                                </small>
                            </div>
                        }

                        @if (Model?.Stats != null && Model.Stats.LowStockProducts == 0 && Model.Stats.PendingOrders == 0 && (Model?.CustomerInsights?.NewCustomers ?? 0) == 0)
                        {
                            <div class="alert alert-info">
                                <h5><i class="icon fas fa-info"></i> All Good!</h5>
                                No notifications at this time. Everything is running smoothly!
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!--Category Performance Row-->
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Category Performance</h3>
                        <div class="card-tools">
                            <span class="badge badge-primary">Doughnut Chart - Sales by Category</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <canvas id="categoryChart" style="height: 300px;"></canvas>
                            </div>
                            <div class="col-md-6">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Category</th>
                                            <th>Products</th>
                                            <th>Sales</th>
                                            <th>Orders</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Model?.CategoryPerformance != null && Model.CategoryPerformance.Any())
                                        {
                                            @foreach (var category in Model.CategoryPerformance)
                                            {
                                                <tr>
                                                    <td>@category.CategoryName</td>
                                                    <td>@category.ProductCount</td>
                                                    <td>$@category.TotalSales.ToString("N0")</td>
                                                    <td>@category.OrderCount</td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="4" class="text-center text-muted">No category data available</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</section>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // Pass server data to JavaScript
        window.dashboardData = {
            popularProducts: @Html.Raw(Json.Serialize(
            Model?.PopularProducts != null
        ? Model.PopularProducts.Select(p => new
        {
            productName = p.ProductName ?? "Unknown Product",
            unitsSold = p.UnitsSold,
            revenue = p.Revenue
        }).ToArray()
        : new object[0]
        )),
            categoryPerformance: @Html.Raw(Json.Serialize(
            Model?.CategoryPerformance != null
                ? Model.CategoryPerformance.Select(c => new
                {
        categoryName = c.CategoryName ?? "Unknown Category",
        totalSales = c.TotalSales,
        orderCount = c.OrderCount
                }).ToArray()
                : new object[0]
        )),
            lastUpdated: '@(Model?.LastUpdated.ToString("yyyy-MM-dd HH:mm:ss") ?? DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))',
            urls: {
                getSalesData: '@Url.Action("GetSalesData", "Dashboard")',
                getCategoryData: '@Url.Action("GetCategoryData", "Dashboard")',
                getRecentOrders: '@Url.Action("GetRecentOrders", "Dashboard")',
                getDashboardNotifications: '@Url.Action("GetDashboardNotifications", "Dashboard")'
            }
        };

        // Dashboard initialization
        $(document).ready(function() {
            initializeDashboard();
            loadRecentOrders();
            loadCharts();
        });

        function initializeDashboard() {
            // Time range selector
            $('#timeRange').on('change', function() {
                const days = $(this).val();
                loadSalesData(days);
            });

            // Load initial data
            loadSalesData(30);
        }

        function loadRecentOrders() {
            $.get(window.dashboardData.urls.getRecentOrders)
                .done(function(response) {
                    if (response.success && response.data) {
                        displayRecentOrders(response.data);
                    } else {
                        $('#recentOrdersTable').html('<tr><td colspan="5" class="text-center text-muted">No recent orders found</td></tr>');
                    }
                })
                .fail(function() {
                    $('#recentOrdersTable').html('<tr><td colspan="5" class="text-center text-danger">Failed to load recent orders</td></tr>');
                });
        }

        function displayRecentOrders(orders) {
            let html = '';
            if (orders && orders.length > 0) {
                orders.forEach(function(order) {
                    const statusClass = getStatusClass(order.orderStatus);
                    const orderDate = new Date(order.orderDate).toLocaleDateString();

                    html += `
                        <tr>
                            <td>#${order.orderId}</td>
                            <td>${order.customerName || 'N/A'}</td>
                            <td>$${order.totalAmount.toFixed(2)}</td>
                            <td><span class="badge ${statusClass}">${order.orderStatus}</span></td>
                            <td>${orderDate}</td>
                        </tr>
                    `;
                });
            } else {
                html = '<tr><td colspan="5" class="text-center text-muted">No recent orders found</td></tr>';
            }
            $('#recentOrdersTable').html(html);
        }

        function getStatusClass(status) {
            switch (status?.toLowerCase()) {
                case 'pending': return 'badge-warning';
                case 'processing': return 'badge-info';
                case 'completed': return 'badge-success';
                case 'cancelled': return 'badge-danger';
                default: return 'badge-secondary';
            }
        }

        function loadSalesData(days) {
            $.get(window.dashboardData.urls.getSalesData, { days: days })
                .done(function(response) {
                    if (response.success && response.data) {
                        updateRevenueChart(response.data);
                    }
                })
                .fail(function() {
                    console.error('Failed to load sales data');
                });
        }

        function loadCharts() {
            // Initialize charts with current data
            if (window.dashboardData.popularProducts && window.dashboardData.popularProducts.length > 0) {
                initializeProductsChart();
            }

            if (window.dashboardData.categoryPerformance && window.dashboardData.categoryPerformance.length > 0) {
                initializeCategoryChart();
            }
        }

        function initializeProductsChart() {
            const ctx = document.getElementById('productsChart').getContext('2d');
            const data = window.dashboardData.popularProducts;

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.map(p => p.productName.substring(0, 15) + (p.productName.length > 15 ? '...' : '')),
                    datasets: [{
                        label: 'Units Sold',
                        data: data.map(p => p.unitsSold),
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function initializeCategoryChart() {
            const ctx = document.getElementById('categoryChart').getContext('2d');
            const data = window.dashboardData.categoryPerformance;

            const colors = [
                '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF'
            ];

            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: data.map(c => c.categoryName),
                    datasets: [{
                        data: data.map(c => c.totalSales),
                        backgroundColor: colors.slice(0, data.length),
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        function updateRevenueChart(salesData) {
            const ctx = document.getElementById('revenueChart').getContext('2d');

            // Destroy existing chart if it exists
            if (window.revenueChart) {
                window.revenueChart.destroy();
            }

            window.revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: salesData.map(d => new Date(d.date).toLocaleDateString()),
                    datasets: [{
                        label: 'Sales ($)',
                        data: salesData.map(d => d.sales),
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        }
    </script>
}

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <style>
        .small-box .inner h3 {
            font-size: 2.2rem;
            font-weight: bold;
            margin: 0 0 10px 0;
        }

        .small-box .inner p {
            font-size: 1rem;
        }

        .small-box .inner small {
            font-size: 0.875rem;
        }

        .card-body canvas {
            max-height: 400px;
        }

        .badge {
            font-size: 0.75rem;
        }

        .spinner-border-sm {
            width: 1rem;
            height: 1rem;
        }
    </style>
}