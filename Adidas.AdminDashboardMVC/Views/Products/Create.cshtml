@model Adidas.DTOs.Main.Product_DTOs.CreateProductDto
@{
    ViewData["Title"] = "Create Product";
}

<style>
    :root {
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --success-gradient: linear-gradient(135deg, #00d4aa 0%, #02aab0 100%);
        --warning-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        --info-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        --surface: rgba(255, 255, 255, 0.95);
        --surface-hover: rgba(255, 255, 255, 0.98);
        --text-primary: #2c3e50;
        --text-secondary: #6c757d;
        --border-color: rgba(0, 0, 0, 0.08);
        --shadow-light: 0 4px 20px rgba(0, 0, 0, 0.08);
        --shadow-medium: 0 8px 30px rgba(0, 0, 0, 0.12);
        --shadow-heavy: 0 15px 40px rgba(0, 0, 0, 0.15);
        --border-radius: 16px;
        --border-radius-small: 12px;
        --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .product-form-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
    }

    .page-header {
        text-align: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f8f9fa;
    }

        .page-header h2 {
            color: #2c3e50;
            font-weight: 600;
            margin: 0;
            font-size: 2rem;
        }

        .page-header p {
            color: #6c757d;
            margin: 0.5rem 0 0 0;
            font-size: 1.1rem;
        }

    .form-card {
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
        padding: 2rem;
        border: 1px solid #e9ecef;
    }

    .form-row {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        flex: 1;
        margin-bottom: 1.5rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #495057;
            font-size: 0.95rem;
        }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        transition: all 0.2s ease;
        background-color: #ffffff;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.1);
            transform: translateY(-1px);
        }

        .form-control:hover {
            border-color: #ced4da;
        }

    select.form-control {
        cursor: pointer;
    }

    textarea.form-control {
        resize: vertical;
        min-height: 120px;
        font-family: inherit;
    }

    .checkbox-group {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border: 2px solid #e9ecef;
        margin-bottom: 1.5rem;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin: 0;
    }

    .form-check-input {
        width: 20px;
        height: 20px;
        margin: 0;
        cursor: pointer;
    }

    .form-check-label {
        margin: 0;
        cursor: pointer;
        font-weight: 600;
        color: #495057;
    }

    .price-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        border: 1px solid #dee2e6;
    }

        .price-section h4 {
            margin: 0 0 1rem 0;
            color: #495057;
            font-size: 1.1rem;
            font-weight: 600;
        }

    .description-section {
        background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        border: 1px solid #ffcc02;
    }

        .description-section h4 {
            margin: 0 0 1rem 0;
            color: #e65100;
            font-size: 1.1rem;
            font-weight: 600;
        }

    .button-group {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e9ecef;
    }

    .btn {
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        min-width: 120px;
        justify-content: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
        color: white;
        box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3);
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #1e7e34 0%, #155724 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(40, 167, 69, 0.4);
        }

    .btn-secondary {
        background: #6c757d;
        color: white;
        text-decoration: none;
    }

        .btn-secondary:hover {
            background: #545b62;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);
            color: white;
            text-decoration: none;
        }

    .text-danger {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
        font-weight: 500;
    }

    .required-field label::after {
        content: " *";
        color: #dc3545;
        font-weight: bold;
    }

    .form-step {
        background: #e3f2fd;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        border-left: 4px solid #2196f3;
    }

        .form-step h4 {
            margin: 0 0 1rem 0;
            color: #1976d2;
            font-size: 1.1rem;
            font-weight: 600;
        }

    /* Progress indicator */
    .form-progress {
        display: flex;
        justify-content: space-between;
        margin-bottom: 2rem;
        position: relative;
    }

    .progress-step {
        flex: 1;
        text-align: center;
        position: relative;
        padding: 1rem 0.5rem;
    }

        .progress-step::before {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            width: 30px;
            height: 30px;
            background: #e9ecef;
            border-radius: 50%;
            transform: translateX(-50%);
            border: 2px solid #dee2e6;
        }

        .progress-step.active::before {
            background: #007bff;
            border-color: #007bff;
        }

        .progress-step span {
            display: block;
            margin-top: 40px;
            font-size: 0.9rem;
            color: #6c757d;
            font-weight: 500;
        }

        .progress-step.active span {
            color: #007bff;
            font-weight: 600;
        }

    /* Enhanced form validation styles */
    .form-group.has-error .form-control {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }

    .form-group.has-success .form-control {
        border-color: #28a745;
        box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
    }

    /* Character counter styles */
    .character-counter {
        font-size: 0.8rem;
        color: #6c757d;
        text-align: right;
        margin-top: 0.25rem;
    }

        .character-counter.warning {
            color: #ffc107;
        }

        .character-counter.danger {
            color: #dc3545;
        }

    /* Loading state for submit button */
    .btn-loading {
        position: relative;
        color: transparent;
    }

        .btn-loading::after {
            content: '';
            position: absolute;
            width: 16px;
            height: 16px;
            top: 50%;
            left: 50%;
            margin-left: -8px;
            margin-top: -8px;
            border: 2px solid transparent;
            border-top: 2px solid #ffffff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

    spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Responsive design */
   (max-width: 768px) {
        .product-form-container

    {
        padding: 1rem;
    }

    .form-card {
        padding: 1.5rem;
    }

    .form-row {
        flex-direction: column;
        gap: 0;
    }

    .button-group {
        flex-direction: column;
    }

    .btn {
        width: 100%;
    }

    .progress-step {
        padding: 1rem 0.25rem;
    }

        .progress-step span {
            font-size: 0.8rem;
        }

    .page-header h2 {
        font-size: 1.6rem;
    }

    }

   (max-width: 480px) {
        .product-form-container

    {
        padding: 0.5rem;
    }

    .form-card {
        padding: 1rem;
        border-radius: 8px;
    }

    .form-step, .price-section, .description-section {
        padding: 1rem;
    }

    .page-header {
        padding: 1rem;
    }

        .page-header h2 {
            font-size: 1.4rem;
        }

        .page-header p {
            font-size: 1rem;
        }

    }
</style>

<link href="~/css/Product.css" rel="stylesheet" />
<div class="main-headerr my-5 ">
    <div class="container">
        <div class="header-content text-center">
            <h1 class="mb-0">
                <i class="fas fa-boxes me-2"></i>
                🆕 Create New Product
            </h1>
            <p class="mb-0 mt-2 opacity-75">Add a new product to your Adidas collection</p>
        </div>
    </div>
</div>
  

    <div class="form-card">
        <form asp-action="Create" method="post" id="createProductForm">

            <!-- Step 1: Basic Information -->
            <div class="form-step" id="step1">
                <h4>📋 Step 1: Basic Information</h4>

                <div class="form-group required-field">
                    <label asp-for="Name">Product Name</label>
                    <input asp-for="Name" class="form-control" placeholder="Enter product name (e.g., UltraBoost 22)" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="form-row">
                    <div class="form-group required-field">
                        <label asp-for="CategoryId">📂 Category</label>
                        <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.Categories">
                            <option value="">Select a category</option>
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>
                    <div class="form-group required-field">
                        <label asp-for="BrandId">🏷️ Brand</label>
                        <select asp-for="BrandId" class="form-control" asp-items="ViewBag.Brands">
                            <option value="">Select a brand</option>
                        </select>
                        <span asp-validation-for="BrandId" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-group required-field">
                    <label asp-for="GenderTarget">👥 Target Gender</label>
                    <select asp-for="GenderTarget" class="form-control" asp-items="ViewBag.Genders">
                        <option value="">Select target gender</option>
                    </select>
                    <span asp-validation-for="GenderTarget" class="text-danger"></span>
                </div>
            </div>

            <!-- Step 2: Pricing -->
            <div class="price-section" id="step2">
                <h4>💰 Step 2: Pricing Information</h4>
                <div class="form-group required-field">
                    <label asp-for="Price">Product Price</label>
                    <input asp-for="Price" class="form-control" type="number" step="0.01" min="0" placeholder="0.00" />
                    <span asp-validation-for="Price" class="text-danger"></span>
                @* <label asp-for="Sale">On Sale</label>
                <input asp-for="Sale" class="form-control" type="number" step="0.01" min="0" placeholder="0.00" /> *@
              
                </div>
            </div>

            <!-- Step 3: Descriptions -->
            <div class="description-section" id="step3">
                <h4>📝 Step 3: Product Details</h4>

   

                <div class="form-group">
                    <label asp-for="Description">Full Description</label>
                    <textarea asp-for="Description" class="form-control"
                              placeholder="Enter detailed product description including features, materials, and benefits..."
                              maxlength="1000"></textarea>
                    <div class="character-counter" id="descCounter">0 / 1000 characters</div>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
            </div>

 

            <!-- Action Buttons -->
            <div class="button-group">

            <button type="submit" class="btn .btn-search" id="submitBtn">
                    ✅ Create Product
                </button>
                <a asp-action="Index" class="btn btn-secondary">
                    ❌ Cancel
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('createProductForm');
            const submitBtn = document.getElementById('submitBtn');

            // Progress tracking
            function updateProgress() {
                const steps = document.querySelectorAll('.progress-step');
                const requiredFields = {
                    step1: ['input[asp-for="Name"]', 'select[asp-for="CategoryId"]', 'select[asp-for="BrandId"]', 'select[asp-for="GenderTarget"]'],
                    step2: ['input[asp-for="Price"]'],
                    step3: [], // Optional fields
                    step4: [] // Optional checkbox
                };

                let completedSteps = 0;

                Object.keys(requiredFields).forEach((stepId, index) => {
                    const stepFields = requiredFields[stepId];
                    const allFilled = stepFields.every(selector => {
                        const field = document.querySelector(selector);
                        return field && field.value.trim() !== '';
                    });

                    if (allFilled || stepFields.length === 0) {
                        steps[index].classList.add('active');
                        completedSteps++;
                    } else {
                        steps[index].classList.remove('active');
                    }
                });

                // Always show at least step 1 as active
                if (completedSteps === 0) {
                    steps[0].classList.add('active');
                }
            }

            // Form field enhancements
            const inputs = document.querySelectorAll('.form-control');
            inputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.parentElement.classList.add('focused');
                });

                input.addEventListener('blur', function() {
                    this.parentElement.classList.remove('focused');
                    updateProgress();
                });

                input.addEventListener('input', updateProgress);
            });

            // Character counters
            function setupCharacterCounter(inputSelector, counterId, maxLength) {
                const input = document.querySelector(inputSelector);
                const counter = document.getElementById(counterId);

                if (input && counter) {
                    function updateCounter() {
                        const length = input.value.length;
                        counter.textContent = `${length} / ${maxLength} characters`;

                        // Color coding
                        counter.classList.remove('warning', 'danger');
                        if (length > maxLength * 0.9) {
                            counter.classList.add('danger');
                        } else if (length > maxLength * 0.7) {
                            counter.classList.add('warning');
                        }
                    }

                    input.addEventListener('input', updateCounter);
                    updateCounter();
                }
            }

            setupCharacterCounter('input[asp-for="ShortDescription"]', 'shortDescCounter', 100);
            setupCharacterCounter('textarea[asp-for="Description"]', 'descCounter', 1000);

            // Form validation with enhanced feedback
            form.addEventListener('submit', function(e) {
                const requiredFields = document.querySelectorAll('.required-field input, .required-field select');
                let hasErrors = false;
                let errorMessages = [];

                // Clear previous validation states
                document.querySelectorAll('.form-group').forEach(group => {
                    group.classList.remove('has-error', 'has-success');
                });

                requiredFields.forEach(field => {
                    const formGroup = field.closest('.form-group');

                    if (!field.value.trim()) {
                        formGroup.classList.add('has-error');
                        hasErrors = true;

                        const label = formGroup.querySelector('label');
                        if (label) {
                            errorMessages.push(label.textContent.replace(' *', '').replace(/[📋📂🏷️👥💰]/g, '').trim());
                        }
                    } else {
                        formGroup.classList.add('has-success');
                    }
                });

                if (hasErrors) {
                    e.preventDefault();

                    // Show error message
                    const errorMsg = `Please fill in the following required fields:\n• ${errorMessages.join('\n• ')}`;
                    alert(errorMsg);

                    // Scroll to first error and focus
                    const firstError = document.querySelector('.has-error .form-control');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        setTimeout(() => firstError.focus(), 300);
                    }
                } else {
                    // Show loading state
                    submitBtn.classList.add('btn-loading');
                    submitBtn.disabled = true;

                    // Re-enable after 10 seconds as fallback
                    setTimeout(() => {
                        submitBtn.classList.remove('btn-loading');
                        submitBtn.disabled = false;
                    }, 10000);
                }
            });

            // Price input formatting and validation
            const priceInput = document.querySelector('input[asp-for="Price"]');
            if (priceInput) {
                priceInput.addEventListener('blur', function() {
                    if (this.value && !isNaN(this.value)) {
                        const value = parseFloat(this.value);
                        if (value >= 0) {
                            this.value = value.toFixed(2);
                        }
                    }
                });

                priceInput.addEventListener('input', function() {
                    // Remove non-numeric characters except decimal point
                    this.value = this.value.replace(/[^0-9.]/g, '');

                    // Ensure only one decimal point
                    const parts = this.value.split('.');
                    if (parts.length > 2) {
                        this.value = parts[0] + '.' + parts.slice(1).join('');
                    }

                    // Limit to 2 decimal places
                    if (parts[1] && parts[1].length > 2) {
                        this.value = parseFloat(this.value).toFixed(2);
                    }
                });
            }

            // Initial progress update
            updateProgress();

            // Auto-save to localStorage (optional enhancement)
            function saveFormData() {
                const formData = new FormData(form);
                const data = {};
                for (let [key, value] of formData.entries()) {
                    data[key] = value;
                }
                try {
                    localStorage.setItem('createProductForm', JSON.stringify(data));
                } catch (e) {
                    // localStorage not available, ignore
                }
            }

            function loadFormData() {
                try {
                    const saved = localStorage.getItem('createProductForm');
                    if (saved) {
                        const data = JSON.parse(saved);
                        Object.keys(data).forEach(key => {
                            const field = form.querySelector(`[name="${key}"]`);
                            if (field) {
                                if (field.type === 'checkbox') {
                                    field.checked = data[key] === 'true';
                                } else {
                                    field.value = data[key];
                                }
                            }
                        });
                        updateProgress();
                    }
                } catch (e) {
                    // Error loading data, ignore
                }
            }

            // Load saved data on page load
            loadFormData();

            // Save data on input change
            inputs.forEach(input => {
                input.addEventListener('input', saveFormData);
            });

            // Clear saved data on successful submit
            form.addEventListener('submit', function() {
                if (!form.querySelector('.has-error')) {
                    try {
                        localStorage.removeItem('createProductForm');
                    } catch (e) {
                        // localStorage not available, ignore
                    }
                }
            });
        });
    </script>
}