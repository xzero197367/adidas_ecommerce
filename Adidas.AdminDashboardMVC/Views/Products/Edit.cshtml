@model Adidas.DTOs.Main.ProductDTOs.ProductUpdateDto
@{
    ViewData["Title"] = "Edit Product";
}
<link href="~/css/Product.css" rel="stylesheet" />
<style>
    .product-form-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
    }

    .page-header {
        text-align: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f8f9fa;
    }

        .page-header h2 {
            color: #2c3e50;
            font-weight: 600;
            margin: 0;
            font-size: 2rem;
        }

        .page-header p {
            color: #6c757d;
            margin: 0.5rem 0 0 0;
            font-size: 1.1rem;
        }

    .form-card {
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
        padding: 2rem;
        border: 1px solid #e9ecef;
    }

    .form-row {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        flex: 1;
        margin-bottom: 1.5rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #495057;
            font-size: 0.95rem;
        }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        transition: all 0.2s ease;
        background-color: #ffffff;
    }

        .form-control:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.1);
            transform: translateY(-1px);
        }

        .form-control:hover {
            border-color: #ced4da;
        }

    select.form-control {
        cursor: pointer;
    }

    textarea.form-control {
        resize: vertical;
        min-height: 120px;
    }

    .checkbox-group {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border: 2px solid #e9ecef;
        margin-bottom: 1.5rem;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin: 0;
    }

    .form-check-input {
        width: 20px;
        height: 20px;
        margin: 0;
        cursor: pointer;
    }

    .form-check-label {
        margin: 0;
        cursor: pointer;
        font-weight: 600;
        color: #495057;
    }

    .price-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        border: 1px solid #dee2e6;
    }

        .price-section h4 {
            margin: 0 0 1rem 0;
            color: #495057;
            font-size: 1.1rem;
            font-weight: 600;
        }

    .existing-images-section {
        margin-bottom: 1.5rem;
    }

        .existing-images-section h5 {
            color: #495057;
            margin-bottom: 1rem;
            font-weight: 600;
        }

    /* Image Upload Section Styles */
    .image-upload-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        border: 1px solid #dee2e6;
    }

        .image-upload-section h4 {
            margin: 0 0 1rem 0;
            color: #495057;
            font-size: 1.1rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .image-counter {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

    .file-input-wrapper {
        position: relative;
        margin-bottom: 1rem;
    }

    .file-input {
        display: none;
    }

    .file-input-label {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        border: 2px dashed #ced4da;
        border-radius: 8px;
        background-color: #ffffff;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
        min-height: 120px;
    }

        .file-input-label:hover {
            border-color: #007bff;
            background-color: #f8f9ff;
        }

        .file-input-label i {
            font-size: 2.5rem;
            color: #6c757d;
            margin-bottom: 1rem;
        }

        .file-input-label span {
            color: #495057;
            font-weight: 500;
        }

    .upload-guidelines {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 6px;
        padding: 1rem;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }

        .upload-guidelines ul {
            margin: 0.5rem 0 0 0;
            padding-left: 1.2rem;
        }

        .upload-guidelines li {
            margin: 0.25rem 0;
        }

    /* Images Preview Container */
    .images-preview-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }

    .image-preview-item {
        position: relative;
        background: #ffffff;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .image-preview-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-color: #007bff;
        }

        .image-preview-item img {
            width: 100%;
            height: 120px;
            object-fit: cover;
            display: block;
        }

        .image-preview-item .image-info {
            padding: 0.5rem;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
            font-size: 0.75rem;
            text-align: center;
        }

            .image-preview-item .image-info div:first-child {
                font-weight: 600;
                color: #495057;
                margin-bottom: 0.25rem;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .image-preview-item .image-info div:last-child {
                color: #6c757d;
            }

        .image-preview-item .remove-image {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            width: 24px;
            height: 24px;
            border: none;
            background: rgba(220, 53, 69, 0.9);
            color: white;
            border-radius: 50%;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

            .image-preview-item .remove-image:hover {
                background: #dc3545;
                transform: scale(1.1);
            }

    .existing-image {
        opacity: 0.8;
        border-color: #6c757d !important;
    }

        .existing-image .image-info {
            background: #f8f9fa !important;
            color: #6c757d !important;
        }

    .current-image {
        text-align: center;
        margin-bottom: 1rem;
    }

        .current-image img {
            max-width: 200px;
            max-height: 200px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border: 2px solid #e9ecef;
        }

        .current-image p {
            margin: 0.5rem 0 0 0;
            color: #6c757d;
            font-size: 0.9rem;
        }

    .button-group {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e9ecef;
    }

    .btn {
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        min-width: 120px;
        justify-content: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        color: white;
        box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.4);
        }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background: #545b62;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);
        }

    .text-danger {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
        font-weight: 500;
    }

    .required-field label::after {
        content: " *";
        color: #dc3545;
        font-weight: bold;
    }

    /* Form validation styles */
    .has-error .form-control {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.1);
    }

    .has-success .form-control {
        border-color: #28a745;
        box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.1);
    }

    .focused {
        transform: scale(1.01);
    }

    /* Loading button state */
    .btn-loading {
        position: relative;
        color: transparent !important;
    }

        .btn-loading::after {
            content: "";
            position: absolute;
            width: 16px;
            height: 16px;
            top: 50%;
            left: 50%;
            margin-left: -8px;
            margin-top: -8px;
            border: 2px solid #ffffff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s linear infinite;
        }

    spin {
        to

    {
        transform: rotate(360deg);
    }

    }

    /* Responsive Design */
    (max-width: 768px) {
        .product-form-container

    {
        padding: 1rem;
    }

    .form-card {
        padding: 1.5rem;
    }

    .form-row {
        flex-direction: column;
        gap: 0;
    }

    .button-group {
        flex-direction: column;
    }

    .btn {
        width: 100%;
    }

    .current-image img {
        max-width: 150px;
        max-height: 150px;
    }

    .images-preview-container {
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 0.5rem;
    }

    .image-preview-item img {
        height: 100px;
    }

    }
</style>

<div class="main-headerr my-5">
    <div class="container">
        <div class="header-content text-center">
            <h1 class="mb-0">
                <i class="fas fa-boxes me-2"></i>
                ✏️ Edit Product
            </h1>
            <p class="mb-0 mt-2 opacity-75">Update product information and details</p>
        </div>
    </div>
</div>

<div class="product-form-container">
    <div class="form-card">
        <form id="createProductForm" asp-controller="Products" asp-action="Edit" method="post" enctype="multipart/form-data">
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="CurrentImagePath" />

            <!-- Basic Information -->
            <div class="form-group required-field">
                <label asp-for="Name">Product Name</label>
                <input asp-for="Name" class="form-control" placeholder="Enter product name" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <!-- Multiple Images Section -->
            <div class="image-upload-section" id="step2">
                <h4>🖼️ Product Images</h4>

                <!-- Show existing images if they exist -->
                @if (Model.ExistingImages != null && Model.ExistingImages.Any())
                {
                    <div class="existing-images-section">
                        <h5>Current Images</h5>
                        <div class="images-preview-container">
                            @foreach (var img in Model.ExistingImages.OrderBy(i => i.SortOrder))
                            {
                                <div class="image-preview-item existing-image position-relative">
                                    <img src="@img.ImageUrl" alt="@img.AltText">
                                    <div class="image-info">
                                        <div>@(img.IsPrimary ? "Main Image" : $"Image {img.SortOrder + 1}")</div>
                                        <div class="mt-2">
                                            <label class="form-check-label">
                                                <input type="checkbox" name="DeleteImages" value="@img.Id" class="form-check-input me-1 delete-checkbox" />
                                                <small class="text-danger">Delete</small>
                                            </label>
                                        </div>
                                    </div>
                                    @if (img.IsPrimary)
                                    {
                                        <span class="badge bg-primary position-absolute top-0 start-0 m-1">Primary</span>
                                    }
                                </div>
                            }
                        </div>
                        <p class="text-muted mt-2">Check images to delete, or upload new images to replace all existing images</p>
                    </div>
                }
                <div class="form-group">
                    <label asp-for="Images">Upload New Product Images</label>
                    <div class="image-counter" id="imageCounter">0 / 10 images selected</div>

                    <div class="file-input-wrapper">
                        <input asp-for="Images" type="file" class="file-input" id="imagesInput"
                               accept="image/*" multiple />
                        <label for="imagesInput" class="file-input-label" id="fileLabel">
                            <i class="fas fa-cloud-upload-alt"></i>
                            <span>Choose multiple images or drag & drop here</span>
                        </label>
                    </div>

                    <div class="upload-guidelines">
                        <strong>📸 Image Guidelines:</strong>
                        <ul>
                            <li>Maximum 10 images per product</li>
                            <li>Maximum file size: 5MB per image</li>
                            <li>Accepted formats: JPG, JPEG, PNG, GIF, WEBP</li>
                            <li>First image will be used as the main product image</li>
                            <li>New images will replace all existing images</li>
                        </ul>
                    </div>

                    <div class="images-preview-container" id="imagesPreview"></div>
                    <span asp-validation-for="Images" class="text-danger"></span>
                </div>
            </div>

            <!-- Price Section -->
            <div class="price-section">
                <h4>💰 Pricing Information</h4>
                <div class="form-row">
                    <div class="form-group required-field">
                        <label asp-for="Price">Regular Price</label>
                        <input asp-for="Price" class="form-control" type="number" step="0.01" placeholder="0.00" />
                        <span asp-validation-for="Price" class="text-danger"></span>
                    </div>
                    <div class="form-group required-field">
                        <label asp-for="GenderTarget">Gender Target</label>
                        <select asp-for="GenderTarget" class="form-control" asp-items="ViewBag.Genders">
                            <option value="">Select gender target</option>
                        </select>
                        <span asp-validation-for="GenderTarget" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="SalePrice">Sale Price</label>
                        <input id="salePriceInput" asp-for="SalePrice" class="form-control" type="number" step="0.01"
                               placeholder="0.00 (Optional)" />
                        <span asp-validation-for="SalePrice" class="text-danger"></span>
                    </div>
                </div>
                <div id="salePriceInfo" style="display: none;">
                    <div class="alert alert-info">
                        <i class="fas fa-tag"></i>
                        This product will be marked as on sale!
                    </div>
                </div>
            </div>

            <!-- Category -->
            <div class="form-group required-field">
                <label asp-for="CategoryId">📂 Category</label>
                <select asp-for="CategoryId" asp-items="ViewBag.Categories" class="form-control">
                    <option value="">Select a category</option>
                </select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>

            <!-- Description -->
            <div class="form-group">
                <label asp-for="Description">📝 Product Description</label>
                <textarea asp-for="Description" class="form-control"
                          placeholder="Enter detailed product description..."></textarea>
                <div id="descCounter" class="character-counter"></div>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <!-- Action Buttons -->
            <div class="button-group">
                <button id="submitBtn" type="submit" class="btn btn-primary">
                    💾 Save Changes
                </button>
                <a asp-action="Index" class="btn btn-secondary">
                    ❌ Cancel
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('createProductForm');
            const submitBtn = document.getElementById('submitBtn');
            const salePriceInput = document.getElementById('salePriceInput');
            const salePriceInfo = document.getElementById('salePriceInfo');
            const priceInput = document.querySelector('input[asp-for="Price"]');
            const imagesInput = document.getElementById('imagesInput');
            const fileLabel = document.getElementById('fileLabel');
            const imagesPreview = document.getElementById('imagesPreview');
            const imageCounter = document.getElementById('imageCounter');

            let selectedFiles = [];
            const maxFiles = 10;
            const maxFileSize = 5 * 1024 * 1024; // 5MB

                    const deleteCheckboxes = document.querySelectorAll('.delete-checkbox');
        deleteCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const imageItem = this.closest('.image-preview-item');
                if (this.checked) {
                    const confirmed = confirm('Are you sure you want to delete this image?');
                    if (confirmed) {
                        imageItem.style.opacity = '0.5';
                        imageItem.style.filter = 'grayscale(50%)';
                    } else {
                        this.checked = false;
                    }
                } else {
                    imageItem.style.opacity = '1';
                    imageItem.style.filter = 'none';
                }
            });
        });

            // Multiple images upload functionality
            function updateImageCounter() {
                const count = selectedFiles.length;
                imageCounter.textContent = `${count} / ${maxFiles} images selected`;

                if (count > 0) {
                    fileLabel.innerHTML = `<i class="fas fa-images"></i><span>${count} image(s) selected - Click to add more</span>`;
                } else {
                    fileLabel.innerHTML = '<i class="fas fa-cloud-upload-alt"></i><span>Choose multiple images or drag & drop here</span>';
                }
            }

            function validateImageFile(file) {
                const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];

                if (!allowedTypes.includes(file.type)) {
                    return 'Invalid file type. Please select JPG, PNG, GIF, or WEBP files only.';
                }

                if (file.size > maxFileSize) {
                    return 'File size must be less than 5MB.';
                }

                return null;
            }

            function handleFileSelection(newFiles) {
                const filesToAdd = Array.from(newFiles);

                // Check if adding these files would exceed the limit
                if (selectedFiles.length + filesToAdd.length > maxFiles) {
                    alert(`You can only upload maximum ${maxFiles} images. Currently you have ${selectedFiles.length} image(s).`);
                    return;
                }

                let validFiles = [];

                filesToAdd.forEach(file => {
                    const error = validateImageFile(file);
                    if (error) {
                        alert(`${file.name}: ${error}`);
                        return;
                    }

                    // Check for duplicates
                    if (selectedFiles.some(f => f.name === file.name && f.size === file.size)) {
                        alert(`${file.name} is already selected.`);
                        return;
                    }

                    validFiles.push(file);
                });

                // Add valid files to selected files
                validFiles.forEach(file => {
                    selectedFiles.push(file);
                    addImagePreview(file, selectedFiles.length - 1);
                });

                updateImageCounter();
                updateFileInput();
            }

            function addImagePreview(file, index) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const previewItem = document.createElement('div');
                    previewItem.className = 'image-preview-item';
                    previewItem.dataset.index = index;

                    previewItem.innerHTML = `
                        <img src="${e.target.result}" alt="Preview ${index + 1}">
                        <div class="image-info">
                            <div>${file.name}</div>
                            <div>${(file.size / 1024 / 1024).toFixed(1)}MB</div>
                        </div>
                        <button type="button" class="remove-image" onclick="removeImage(${index})">×</button>
                    `;

                    imagesPreview.appendChild(previewItem);
                };
                reader.readAsDataURL(file);
            }

            function updateFileInput() {
                // Create a new DataTransfer object to properly set files
                const dt = new DataTransfer();
                selectedFiles.forEach(file => {
                    dt.items.add(file);
                });

                // Set the files to the input
                imagesInput.files = dt.files;

                // Debug log
                console.log('Updated file input with', selectedFiles.length, 'files');
                console.log('Input files count:', imagesInput.files.length);
            }

            // Global function to remove images (called from HTML)
            window.removeImage = function(index) {
                selectedFiles.splice(index, 1);

                // Remove the preview item
                const previewItem = document.querySelector(`[data-index="${index}"]`);
                if (previewItem) {
                    previewItem.remove();
                }

                // Update indices for remaining items
                document.querySelectorAll('.image-preview-item').forEach((item, newIndex) => {
                    item.dataset.index = newIndex;
                    const removeBtn = item.querySelector('.remove-image');
                    removeBtn.setAttribute('onclick', `removeImage(${newIndex})`);
                });

                updateImageCounter();
                updateFileInput();
            };

            // Image input event listener - simplified approach
            imagesInput.addEventListener('change', function(e) {
                console.log('File input changed, files count:', e.target.files.length);

                if (e.target.files.length > 0) {
                    // Clear previous selections and start fresh
                    selectedFiles = [];
                    imagesPreview.innerHTML = '';

                    // Handle the new selection
                    handleFileSelection(e.target.files);
                }
            });

            // Drag and drop functionality
            fileLabel.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.style.background = '#e3f2fd';
                this.style.borderColor = '#2196f3';
            });

            fileLabel.addEventListener('dragleave', function(e) {
                e.preventDefault();
                this.style.background = '#fff';
                this.style.borderColor = '#4caf50';
            });

            fileLabel.addEventListener('drop', function(e) {
                e.preventDefault();
                this.style.background = '#fff';
                this.style.borderColor = '#4caf50';

                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    // Clear the file input and handle drop
                    imagesInput.value = '';
                    selectedFiles = [];
                    imagesPreview.innerHTML = '';
                    handleFileSelection(files);
                }
            });

            // Sale price functionality
            function toggleSalePrice() {
                const hasSalePrice = salePriceInput.value && parseFloat(salePriceInput.value) > 0;

                if (hasSalePrice) {
                    salePriceInfo.style.display = 'block';
                } else {
                    salePriceInfo.style.display = 'none';
                }
            }

            // Validate sale price against regular price
            function validateSalePrice() {
                const regularPrice = parseFloat(priceInput.value) || 0;
                const salePrice = parseFloat(salePriceInput.value) || 0;
                const salePriceGroup = salePriceInput.closest('.form-group');
                const existingWarning = salePriceGroup.querySelector('.sale-price-warning');

                // Remove existing warning
                if (existingWarning) {
                    existingWarning.remove();
                }

                if (salePrice > 0 && regularPrice > 0 && salePrice >= regularPrice) {
                    const warning = document.createElement('div');
                    warning.className = 'text-danger sale-price-warning';
                    warning.textContent = 'Sale price should be less than regular price';
                    salePriceGroup.appendChild(warning);
                    salePriceGroup.classList.add('has-error');
                } else {
                    salePriceGroup.classList.remove('has-error');
                }
            }

            // Event listeners for sale functionality
            salePriceInput.addEventListener('input', function() {
                toggleSalePrice();
                validateSalePrice();
            });
            priceInput.addEventListener('input', validateSalePrice);

            // Form field enhancements
            const inputs = document.querySelectorAll('.form-control');
            inputs.forEach(input => {
                input.addEventListener('focus', function () {
                    this.parentElement.classList.add('focused');
                });

                input.addEventListener('blur', function () {
                    this.parentElement.classList.remove('focused');
                });
            });

            // Character counters
            function setupCharacterCounter(inputSelector, counterId, maxLength) {
                const input = document.querySelector(inputSelector);
                const counter = document.getElementById(counterId);

                if (input && counter) {
                    function updateCounter() {
                        const length = input.value.length;
                        counter.textContent = `${length} / ${maxLength} characters`;

                        // Color coding
                        counter.classList.remove('warning', 'danger');
                        if (length > maxLength * 0.9) {
                            counter.classList.add('danger');
                        } else if (length > maxLength * 0.7) {
                            counter.classList.add('warning');
                        }
                    }

                    input.addEventListener('input', updateCounter);
                    updateCounter();
                }
            }

            setupCharacterCounter('textarea[asp-for="Description"]', 'descCounter', 1000);

            // Form validation with enhanced feedback
            form.addEventListener('submit', function (e) {
                console.log('Form submitting...');
                console.log('Selected files count:', selectedFiles.length);
                console.log('Input files count:', imagesInput.files.length);
                     const existingImages = document.querySelectorAll('input[name="DeleteImages"]');
        const checkedForDeletion = document.querySelectorAll('input[name="DeleteImages"]:checked');
        const newImageFiles = imagesInput.files;

        if (existingImages.length > 0 &&
            checkedForDeletion.length === existingImages.length &&
            (!newImageFiles || newImageFiles.length === 0)) {

            e.preventDefault();
            alert('You cannot delete all images without uploading new ones. At least one image is required.');
            return false;
        }
                const requiredFields = document.querySelectorAll('.required-field input, .required-field select');
                let hasErrors = false;

                // Clear previous validation states
                document.querySelectorAll('.form-group').forEach(group => {
                    group.classList.remove('has-error', 'has-success');
                });

                // Check required fields
                requiredFields.forEach(field => {
                    const formGroup = field.closest('.form-group');

                    if (!field.value.trim()) {
                        formGroup.classList.add('has-error');
                        hasErrors = true;
                    } else {
                        formGroup.classList.add('has-success');
                    }
                });

                // Validate sale price
                validateSalePrice();
                if (document.querySelector('.sale-price-warning')) {
                    hasErrors = true;
                }

                // Validate images - check both selectedFiles and input files
                const hasImages = imagesInput.files.length > 0 || selectedFiles.length > 0;

                if (!hasImages) {
                    const imageSection = document.querySelector('.image-upload-section');
                    const existingError = imageSection.querySelector('.images-error');

                    if (!existingError) {
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'text-danger images-error';
                        errorDiv.style.marginTop = '0.5rem';
                        errorDiv.textContent = 'At least one product image is required';
                        imageSection.appendChild(errorDiv);
                    }
                    hasErrors = true;
                } else {
                    const existingError = document.querySelector('.images-error');
                    if (existingError) {
                        existingError.remove();
                    }
                }

                if (hasErrors) {
                    e.preventDefault();

                    // Scroll to first error and focus
                    const firstError = document.querySelector('.has-error .form-control, .images-error');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        if (firstError.focus) {
                            setTimeout(() => firstError.focus(), 300);
                        }
                    }
                } else {
                    // Show loading state
                    submitBtn.classList.add('btn-loading');
                    submitBtn.disabled = true;

                    // Re-enable after 10 seconds as fallback
                    setTimeout(() => {
                        submitBtn.classList.remove('btn-loading');
                        submitBtn.disabled = false;
                    }, 10000);
                }
            });

            // Price input formatting and validation
            function setupPriceInput(input) {
                if (!input) return;

                input.addEventListener('blur', function () {
                    if (this.value && !isNaN(this.value)) {
                        const value = parseFloat(this.value);
                        if (value >= 0) {
                            this.value = value.toFixed(2);
                        }
                    }
                });

                input.addEventListener('input', function () {
                    // Remove non-numeric characters except decimal point
                    this.value = this.value.replace(/[^0-9.]/g, '');

                    // Ensure only one decimal point
                    const parts = this.value.split('.');
                    if (parts.length > 2) {
                        this.value = parts[0] + '.' + parts.slice(1).join('');
                    }

                    // Limit to 2 decimal places
                    if (parts[1] && parts[1].length > 2) {
                        this.value = parseFloat(this.value).toFixed(2);
                    }
                });
            }

            setupPriceInput(priceInput);
            setupPriceInput(salePriceInput);

            // Initialize counters
            updateImageCounter();
        });
    </script>
}