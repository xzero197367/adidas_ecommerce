using Adidas.Application.Contracts.ServicesContracts.Separator;
using Adidas.DTOs.Main.Product_DTOs;
using Adidas.DTOs.Separator.Category_DTOs;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace Adidas.AdminDashboardMVC.Controllers.Products
{ 
    public class CategoriesController : Controller
    {
        private readonly ICategoryService _categoryService;
        private readonly IWebHostEnvironment _webHostEnvironment;


        public CategoriesController(ICategoryService categoryService, IWebHostEnvironment webHostEnvironment)
        {
            _categoryService = categoryService;
            _webHostEnvironment = webHostEnvironment;
        }

        public async Task<IActionResult> Index(string categoryType, string statusFilter, string searchTerm)
        {
            var categories = await _categoryService.GetFilteredCategoriesAsync(categoryType, statusFilter, searchTerm);

            ViewData["CurrentType"] = categoryType;
            ViewData["CurrentStatus"] = statusFilter;
            ViewData["SearchTerm"] = searchTerm;

            return View(categories);
        }


        [HttpGet]
        public async Task<IActionResult> Create()
        {
            await PopulateParentCategoriesDropdown();
            return View(new CategoryCreateDto());
        }

        // POST: /Category/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(CategoryCreateDto model, IFormFile ImageFile)
        {
            if (!ModelState.IsValid)
            {
                await PopulateParentCategoriesDropdown();
                return View(model);
            }

            if (ImageFile != null && ImageFile.Length > 0)
            {
                if (ImageFile.Length > 5 * 1024 * 1024)
                {
                    ModelState.AddModelError("ImageUrl", "Image size should not exceed 5MB.");
                    await PopulateParentCategoriesDropdown();
                    return View(model);
                }

                var fileName = Guid.NewGuid() + Path.GetExtension(ImageFile.FileName);
                var relativePath = Path.Combine("uploads", "categories", fileName);
                var absolutePath = Path.Combine(_webHostEnvironment.WebRootPath, "uploads", "categories");

                if (!Directory.Exists(absolutePath))
                {
                    Directory.CreateDirectory(absolutePath);
                }

                var filePath = Path.Combine(absolutePath, fileName);
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await ImageFile.CopyToAsync(stream);
                }

                model.ImageUrl = "/" + relativePath.Replace("\\", "/");
            }

            // ✅ Get Result instead of just bool
            var result = await _categoryService.CreateAsync(model);

            if (!result.IsSuccess)
            {
                ModelState.AddModelError(string.Empty, result.Error); // Show specific error (e.g., slug exists)
                TempData["Error"] = result.Error;

                await PopulateParentCategoriesDropdown();
                return View(model);
            }

            TempData["Success"] = "Category created successfully!";
            return RedirectToAction("Index");
        }


        // GET: /Category/Edit/{id}
        [HttpGet]
        public async Task<IActionResult> Edit(Guid id)
        {
            var category = await _categoryService.GetCategoryToEditByIdAsync(id);
            await PopulateParentCategoriesDropdown(id);
            return View(category);
        }

        // POST: /Category/Edit
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(CategoryUpdateDto model, IFormFile? ImageFile)
        {
         
            if (!ModelState.IsValid)
            {
                ViewBag.CategoryId = model.Id;
                await PopulateParentCategoriesDropdown();
                return View(model);
            }

            if (ImageFile != null && ImageFile.Length > 0)
            {
                if (ImageFile.Length > 5 * 1024 * 1024)
                {
                    ModelState.AddModelError("ImageUrl", "Image size should not exceed 5MB.");
                    ViewBag.CategoryId = model.Id;
                    await PopulateParentCategoriesDropdown();
                    return View(model);
                }

                var fileName = Guid.NewGuid() + Path.GetExtension(ImageFile.FileName);
                var relativePath = Path.Combine("uploads", "categories", fileName);
                var absolutePath = Path.Combine(_webHostEnvironment.WebRootPath, "uploads", "categories");

                if (!Directory.Exists(absolutePath))
                {
                    Directory.CreateDirectory(absolutePath);
                }

                var filePath = Path.Combine(absolutePath, fileName);
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await ImageFile.CopyToAsync(stream);
                }

                model.ImageUrl = "/" + relativePath.Replace("\\", "/");
            }

            var result = await _categoryService.UpdateAsync(model);
            if (!result.IsSuccess)
            {
                ModelState.AddModelError(string.Empty, result.Error);
                TempData["Error"] = result.Error;
                ViewBag.CategoryId = model.Id;
                await PopulateParentCategoriesDropdown();
                return View(model);
            }

            TempData["Success"] = "Category updated successfully!";
            return RedirectToAction("Index");
        }

        [HttpPost]
        public async Task<IActionResult> ToggleStatus(Guid id)
        {
            var result = await _categoryService.ToggleCategoryStatusAsync(id);

            if (!result.IsSuccess)
            {
                TempData["Error"] = result.Error;
            }
            else
            {
                TempData["Success"] = "Category status updated successfully.";
            }
            var referer = Request.Headers["Referer"].ToString();
            if (!string.IsNullOrEmpty(referer))
            {
                return Redirect(referer);
            }


            return RedirectToAction(nameof(Index));
        }

        private async Task PopulateParentCategoriesDropdown(Guid? currentCategoryId = null)
        {
            var parentCategories = await _categoryService.GetMainCategoriesAsync();
            if (currentCategoryId.HasValue)
            {
                parentCategories = parentCategories
                    .Where(c => c.Id != currentCategoryId.Value)
                    .ToList();
            }
            ViewBag.ParentCategories = new SelectList(parentCategories, "Id", "Name");
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Delete(Guid id)
        {
            var result = await _categoryService.DeleteAsync(id);

            if (!result.IsSuccess)
            {
                TempData["Error"] = result.Error;
            }
            else
            {
                TempData["Success"] = "Category deleted successfully!";
            }
            var referer = Request.Headers["Referer"].ToString();
           
            if (!string.IsNullOrEmpty(referer))
            {
                return Redirect(referer);
            }


            return RedirectToAction("Index");
        }

        public async Task<IActionResult> Details(Guid id)
        {
            var referer = Request.Headers["Referer"].ToString();
            if (id == Guid.Empty)
            {
                TempData["ErrorMessage"] = "Invalid category ID provided.";
               
                if (!string.IsNullOrEmpty(referer))
                {
                    return Redirect(referer);
                }

                return RedirectToAction($"{nameof(Index)}");

            }

            try
            {
                var categoryDto = await _categoryService.GetCategoryDetailsAsync(id);

                if (categoryDto == null)
                {
                    TempData["ErrorMessage"] = $"Category with ID '{id}' not found.";
                    if (!string.IsNullOrEmpty(referer))
                    {
                        return Redirect(referer);
                    }
                    return RedirectToAction($"{nameof(Index)}");

                }


                return View(categoryDto);
            }
            catch (Exception ex)
            {

                TempData["ErrorMessage"] = $"An unexpected error occurred while retrieving category details: {ex.Message}";
                if (!string.IsNullOrEmpty(referer))
                {
                    return Redirect(referer);
                }

                return RedirectToAction($"{nameof(Index)}");

            }
        }

        [HttpGet]
        public async Task<IActionResult> GetProductsByCategoryId(Guid id)
        {
            try
            {
                var categoryDto = await _categoryService.GetCategoryDetailsAsync(id);
                if (categoryDto == null || categoryDto.Products == null)
                    return PartialView("_CategoryProductsPartial", new List<ProductDto>());

                return PartialView("_CategoryProductsPartial", categoryDto.Products);
            }
            catch
            {
                return StatusCode(500, "An error occurred while loading products.");
            }
        }

        // api call to get all categories
        
        [HttpGet]
        public async Task<IActionResult> GetCategories()
        {
            try
            {
                var result = await _categoryService.GetAllAsync();
                if (!result.IsSuccess)
                {
                    return BadRequest(new { message = result.ErrorMessage });
                }

                var categories = result.Data.Select(c => new
                {
                    c.Id,
                    c.Name,
                    c.Slug
                }).OrderBy(c => c.Name);

                return Ok(categories);
            }
            catch (Exception ex)
            {
                return BadRequest(new { message = "Error retrieving categories", error = ex.Message });
            }
        }
    }
}